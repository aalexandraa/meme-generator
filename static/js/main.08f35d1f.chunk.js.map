{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","src","alt","MemeGenerator","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","randomMeme","capture","fetch","then","response","json","memes","data","setState","event","target","name","value","this","preventDefault","items","item","Math","floor","random","length","url","divToDisplay","document","getElementById","html2canvas","allowTaint","useCORS","scrollY","window","scrollX","canvas","toDataURL","link","createElement","download","href","click","className","onSubmit","type","placeholder","onChange","id","onClick","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"4KAceA,MAZf,WACE,OACE,mCACE,qBACEC,IAAI,iEACJC,IAAI,aAEN,mD,2DCgFSC,E,kDArFb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,YAAa,IAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBAVH,E,qDAad,WAAqB,IAAD,OAClBG,MAAM,qCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GAAc,IACXE,EAAUF,EAASG,KAAnBD,MACR,EAAKE,SAAS,CAAEX,YAAaS,S,0BAInC,SAAaG,GAAQ,IAAD,EACMA,EAAMC,OAAtBC,EADU,EACVA,KAAMC,EADI,EACJA,MACdC,KAAKL,SAAL,eAAiBG,EAAOC,M,wBAG1B,SAAWH,GACTA,EAAMK,iBACN,IAAIC,EAAQF,KAAKpB,MAAMI,YACnBmB,EAAOD,EAAME,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMK,SAElDP,KAAKL,SAAS,CAAEZ,UAAWoB,EAAKK,Q,qBAGlC,WACE,IAAMC,EAAeC,SAASC,eAAe,QAC7CC,IAAYH,EAAc,CACxBI,YAAY,EACZC,SAAS,EACTC,SAAUC,OAAOD,QACjBE,SAAUD,OAAOC,UAChB3B,MAAK,SAAU4B,GAChB,IAAIV,EAAMU,EAAOC,UAAU,aACvBC,EAAOV,SAASW,cAAc,KAClCD,EAAKE,SAAW,WAChBF,EAAKG,KAAOf,EACZY,EAAKI,a,oBAIT,WACE,OACE,gCACE,uBAAMC,UAAU,YAAYC,SAAU1B,KAAKb,WAA3C,UACE,uBACEwC,KAAK,OACL7B,KAAK,UACL8B,YAAY,WACZ7B,MAAOC,KAAKpB,MAAMC,QAClBgD,SAAU7B,KAAKf,eAEjB,uBACE0C,KAAK,OACL7B,KAAK,aACL8B,YAAY,cACZ7B,MAAOC,KAAKpB,MAAME,WAClB+C,SAAU7B,KAAKf,eAGjB,qDAEF,sBAAK6C,GAAG,OAAOL,UAAU,OAAzB,UACE,qBAAKhD,IAAKuB,KAAKpB,MAAMG,UAAWL,IAAI,KACpC,oBAAI+C,UAAU,MAAd,SAAqBzB,KAAKpB,MAAMC,UAChC,oBAAI4C,UAAU,SAAd,SAAwBzB,KAAKpB,MAAME,gBAErC,wBAAQgD,GAAG,UAAUC,QAAS/B,KAAKZ,QAAnC,kC,GA9EoB4C,aCUbC,MATf,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9C,MAAK,YAAkD,IAA/C+C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlC,SAASC,eAAe,SAM1BuB,M","file":"static/js/main.08f35d1f.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header>\n      <img\n        src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\n        alt=\"Problem?\"\n      />\n      <p>Meme Generator</p>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport html2canvas from \"html2canvas\";\n\nclass MemeGenerator extends Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\n      allMemeImgs: [],\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.randomMeme = this.randomMeme.bind(this);\n    this.capture = this.capture.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((response) => response.json())\n      .then((response) => {\n        const { memes } = response.data;\n        this.setState({ allMemeImgs: memes });\n      });\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  randomMeme(event) {\n    event.preventDefault();\n    var items = this.state.allMemeImgs;\n    var item = items[Math.floor(Math.random() * items.length)];\n\n    this.setState({ randomImg: item.url });\n  }\n\n  capture() {\n    const divToDisplay = document.getElementById(\"meme\");\n    html2canvas(divToDisplay, {\n      allowTaint: true,\n      useCORS: true,\n      scrollY: -window.scrollY,\n      scrollX: -window.scrollX,\n    }).then(function (canvas) {\n      var url = canvas.toDataURL(\"image/png\");\n      var link = document.createElement(\"a\");\n      link.download = \"meme.png\";\n      link.href = url;\n      link.click();\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <form className=\"meme-form\" onSubmit={this.randomMeme}>\n          <input\n            type=\"text\"\n            name=\"topText\"\n            placeholder=\"Top Text\"\n            value={this.state.topText}\n            onChange={this.handleChange}\n          />\n          <input\n            type=\"text\"\n            name=\"bottomText\"\n            placeholder=\"Bottom Text\"\n            value={this.state.bottomText}\n            onChange={this.handleChange}\n          />\n\n          <button>Change Photo</button>\n        </form>\n        <div id=\"meme\" className=\"meme\">\n          <img src={this.state.randomImg} alt=\"\" />\n          <h2 className=\"top\">{this.state.topText}</h2>\n          <h2 className=\"bottom\">{this.state.bottomText}</h2>\n        </div>\n        <button id=\"capture\" onClick={this.capture}>\n          Download Meme\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default MemeGenerator;\n","import React from \"react\";\nimport Header from \"./Header\";\nimport MemeGenerator from \"./MemeGenerator\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}